<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd">

            <!--这里面写  spring的配置文件，主要配置和业务逻辑相关联的-->
             <!-- 数据源 ， 事务管理控制，等等和业务逻辑相关联的-->
                <!--c3p0 连接池-->
        <context:property-placeholder location="classpath:dbconfig.properties" ></context:property-placeholder>
    <!--<context:property-placeholder location="classpath*:/*.properties" />-->
    <!--<context:property-placeholder location="classpath:application.properties"/>-->

    <!--<context:property-placeholder location="classpath:dbconfig.properties,classpath:application.properties" system-properties-mode="NEVER"/>-->

    <bean id="pooledDataSource"  class="com.mchange.v2.c3p0.ComboPooledDataSource" >
                <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
                <property name="driverClass" value="${jdbc.driverClass}"></property>
                <property name="user" value="${jdbc.user}"></property>
                <property name="password" value="${jdbc.password}"></property>
        </bean>

        <!--配置 mybatis -->
        <bean id="sqlSessionFactory"    class="org.mybatis.spring.SqlSessionFactoryBean" >
             <!--指定mybatis全局配置文件的位置-->
                <property name="configLocation" value="classpath:mybatis-config.xml"></property>
                <property name="dataSource"   ref="pooledDataSource"  ></property>
              <!--  指定mybatis，mapper 的文件的位置-->
                <property name="mapperLocations"  value="classpath:xml/**/*.xml"></property>
        </bean>

        <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
            <bean  class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
                    <property name="basePackage" value="com.kexuan.dao"></property>
            </bean>
            <!--配置事务控制-->
        <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager" >
                <!--控制住数据源    -->
            <property name="dataSource"   ref="pooledDataSource" ></property>
        </bean>

<!--            开启基于注解的事务，使用xml配值形式的事务 -->
<!--             <aop:config> -->
<!--                     切入点表达式 -->
<!--                     <aop:pointcut id="txPoint" expression="execution(* com.xiexin.service..*(..))"></aop:pointcut> -->
<!--                     配置事务增强 -->
<!--                     <aop:advisor advice-ref="txAdvice"  pointcut-ref="txPoint"></aop:advisor> -->
<!--             </aop:config> -->
<!--            配置事务增强，事务如何切入 -->
<!--             <tx:advice id="txAdvice"  transaction-manager="transactionManager"> -->
<!--                 <tx:attributes> -->
<!--                     所有方法都是事务方法 -->
<!--                     <tx:method name="*"/> -->
<!--                     所有get开始的方法 -->
<!--                     <tx:method name="get" read-only="true"></tx:method> -->
<!--                 </tx:attributes> -->
<!--             </tx:advice> -->

    <!--&lt;!&ndash; spring data redis &ndash;&gt;-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="usePool" value="true"></property>-->
        <!--<property name="hostName" value="${redis.host}" />-->
        <!--<property name="port" value="${redis.port}" />-->
        <!--&lt;!&ndash;  <property name="password" value=""/> &ndash;&gt;-->
        <!--<property name="timeout" value="${redis.timeout}" />-->
        <!--<property name="database" value="${redis.default.db}"></property>-->
        <!--<constructor-arg   ref="jedisPoolConfig" />-->
    <!--</bean>-->


    <!--&lt;!&ndash; 连接池参数配置 &ndash;&gt;-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxTotal" value="${redis.maxActive}" />-->
        <!--<property name="maxIdle" value="${redis.maxIdle}" />-->
        <!--<property name="maxWaitMillis" value="${redis.maxWait}" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置redis模板,方便存取数据 &ndash;&gt;-->
    <!--&lt;!&ndash; <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">&ndash;&gt;-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
    <!--</bean>-->

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="300"/> <!-- 最大能够保持idel状态的对象数  -->
        <property name="maxTotal" value="60000"/> <!-- 最大分配的对象数 -->
        <property name="testOnBorrow" value="true"/> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}" type="int"/>
    </bean>

</beans>